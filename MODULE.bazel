bazel_dep(name = "aspect_bazel_lib", version = "2.14.0")
bazel_dep(name = "aspect_rules_lint", version = "1.2.2")
bazel_dep(name = "buildifier_prebuilt", version = "8.0.3")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "rules_multitool", version = "1.2.0")
bazel_dep(name = "aspect_rules_js", version = "2.3.3")
bazel_dep(name = "aspect_rules_ts", version = "3.5.2")
bazel_dep(name = "rules_java", version = "8.11.0")
bazel_dep(name = "rules_jvm_external", version = "6.7")
bazel_dep(name = "rules_python", version = "1.3.0")
bazel_dep(name = "rules_python_gazelle_plugin", version = "1.3.0")
bazel_dep(name = "aspect_rules_py", version = "1.3.2")
bazel_dep(name = "rules_uv", version = "0.64.0")
bazel_dep(name = "rules_rust", version = "0.59.2")
bazel_dep(name = "rules_go", version = "0.53.0")
bazel_dep(name = "gazelle", version = "0.42.0")
bazel_dep(name = "toolchains_llvm", version = "1.3.0")
bazel_dep(name = "rules_shell", version = "0.4.0")
bazel_dep(name = "rules_oci", version = "2.2.5")
bazel_dep(name = "platforms", version = "0.0.11")

multitool = use_extension("@rules_multitool//multitool:extension.bzl", "multitool")
multitool.hub(lockfile = "//tools:tools.lock.json")
use_repo(multitool, "multitool")

#########################
# Go
go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")

go_sdk.nogo(nogo = "//tools/lint:nogo")


go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")

# All *direct* Go dependencies of the module have to be listed explicitly.
# Run 'bazel mod tidy' to update this
use_repo(go_deps)

#########################
# JavaScript and pnpm package manager
pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

# Allows developers to run the same pnpm version that Bazel manages
use_repo(pnpm, "pnpm")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm")
npm.npm_translate_lock(
    name = "npm",
    npmrc = "//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
)
use_repo(npm, "npm")

rules_ts_ext = use_extension(
    "@aspect_rules_ts//ts:extensions.bzl",
    "ext",
    dev_dependency = True,
)
rules_ts_ext.deps()
use_repo(rules_ts_ext, "npm_typescript")

#########################
# Hermetic Python interpreter and pip dependencies
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    python_version = "3.12",
)

pip.parse(
    hub_name = "pip",
    python_version = "3.12",
    requirements_lock = "//requirements:all.txt",
)
use_repo(pip, "pip")

#########################
# Hermetic C++ toolchain, to relieve the dependency on a locally installed CC etc.
llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
    # NB: llvm doesn't release for all platforms on every patch release
    llvm_versions = {
        "": "15.0.6",
        "darwin-aarch64": "15.0.7",
        "darwin-x86_64": "15.0.7",
    },
)
use_repo(llvm, "llvm_toolchain", "llvm_toolchain_llvm")

register_toolchains("@llvm_toolchain//:all")

#########################
# Support for Rust, see https://github.com/bazelbuild/rules_rust
rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    versions = ["1.75.0"],
)

#########################
# Java and other JVM languages:
# https://github.com/bazelbuild/rules_jvm_external/blob/master/examples/bzlmod/MODULE.bazel
# https://github.com/bazelbuild/rules_jvm_external#pinning-artifacts-and-integration-with-bazels-downloader

# In the Maven support variation, the dependencies are conveniently listed here
# in the MODULE.bazel file.
maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    artifacts = ["io.grpc:grpc-all:1.51.1"],
    lock_file = "//:maven_install.json",
)
use_repo(
    maven,
    "maven",
    "unpinned_maven",
)
http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "net_sourceforge_pmd",
    build_file_content = """java_import(name = "net_sourceforge_pmd", jars = glob(["*.jar"]), visibility = ["//visibility:public"])""",
    integrity = "sha256-vov2j2wdZphL2WRak+Yxt4ocL0L18PhxkIL+rWdVOUA=",
    strip_prefix = "pmd-bin-7.7.0/lib",
    url = "https://github.com/pmd/pmd/releases/download/pmd_releases/7.7.0/pmd-dist-7.7.0-bin.zip",
)

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

# Base image for GO Containers.
oci.pull(
    name = "distroless_base",
    digest = "sha256:27769871031f67460f1545a52dfacead6d18a9f197db77110cfc649ca2a91f44",
    image = "gcr.io/distroless/base",
    platforms = [
        "linux/amd64",
        "linux/arm64",
    ],
)
use_repo(oci, "distroless_base", "distroless_base_linux_amd64", "distroless_base_linux_arm64")
oci.pull(
    name = "python_base",
    image = "ubuntu",
    digest = "sha256:72297848456d5d37d1262630108ab308d3e9ec7ed1c3286a32fe09856619a782",
    platforms = [
        "linux/arm64/v8",
        "linux/amd64",
    ],
)
use_repo(oci, "python_base", "python_base_linux_amd64", "python_base_linux_arm64_v8")



